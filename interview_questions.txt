1) Describe a use case and the benefits of a Reflection in .NET - 
2) Describe a use case for the dynamic type in .NET - 
3) Explain how anonymous classes instantiated in .NET. Can they be passed as function params? - Done.
4) Explain why a Lambda expression forms a closure. - Done.
5) How would you accomplish lazy initialization in .NET? - done (Via Lazy<T> or custom implementation of this class)
6) massTransit, rabbitmq, structured logging, transaction isolation levels
7) RabbitMQ exchange types - fanout, topic, direct, headers
8) Замыкания -
9) HashSet, Dictionary - done.
10) Using -
11) Joins in sql server -
12) practice in code review - 
13) IDisposable - 
14) Http methods, body, header - 
15) DDD
16) Event Sourcing

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
PREPAIRING TO INTERVIEWS

REDIS:

1. Что такое Redis и в чем его основные особенности?
   - Redis — это хранилище данных в памяти (in-memory), поддерживающее различные структуры данных, такие как строки, списки, множества, хеши и сортированные множества. Он используется для кэширования, очередей, реального времени и других задач, требующих быстрой обработки данных.

2. Какие типы данных поддерживает Redis?
   - Redis поддерживает несколько типов данных:
     - Strings — строки (ключ-значение).
     - Lists — упорядоченные списки (FIFO).
     - Sets — неупорядоченные множества.
     - Sorted Sets — сортированные множества (каждому элементу присваивается балл).
     - Hashes — коллекции пар ключ-значение.
     - Bitmaps, HyperLogLogs, Streams — для специфичных задач.

3. В чем разница между Redis и Memcached?
   - Redis и Memcached оба используются для кэширования, но Redis предлагает дополнительные функции, такие как сохранение данных на диск, репликация, поддержка различных типов данных и атомарные операции. Memcached ограничен только строками и не поддерживает сохранение данных на диск.

4. Как работает репликация в Redis?
   - Redis поддерживает репликацию master-slave, где данные с основного сервера (мастера) копируются на один или несколько ведомых серверов (слейвов). Это обеспечивает отказоустойчивость и масштабируемость.

5. Какие механизмы обеспечения отказоустойчивости существуют в Redis?
   - Redis предлагает несколько механизмов:
     - Persistence: сохранение данных на диск с помощью RDB (снимки базы данных) и AOF (журнал операций).
     - Replication: создание реплик данных для повышения доступности.
     - Sentinel: автоматическое переключение на резервный сервер в случае сбоя основного.

6. Что такое TTL (Time-to-Live) в Redis?
   - TTL — это время жизни ключа в Redis. После истечения этого времени ключ автоматически удаляется. Это полезно для кэширования и управления временными данными.

7. Как Redis обеспечивает атомарность операций?
   - Redis поддерживает атомарные операции на уровне команд, что позволяет выполнять несколько операций над данными без вмешательства других клиентов.

8. Какие ограничения существуют у Redis?
   - Redis является однопоточным, что может ограничивать его производительность при высоких нагрузках. Также он хранит все данные в памяти, что может быть ограничением для хранения больших объемов данных.

9. Как повысить производительность Redis?
   - Для повышения производительности Redis рекомендуется:
     - Использовать pipelining для отправки нескольких команд без ожидания ответа.
     - Настроить правильное использование памяти и политики вытеснения.
     - Использовать подходящие структуры данных для конкретных задач.

10. Какие инструменты мониторинга доступны для Redis?
    - Redis предоставляет встроенные команды для мониторинга, такие как INFO, MONITOR и SLOWLOG. Также существуют сторонние инструменты, например, RedisInsight, которые предлагают более подробный анализ и визуализацию данных.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
MassTransit

Основы MassTransit
	Что такое MassTransit, и для чего он используется?
	Какие основные концепции Message Broker'ов поддерживает MassTransit (очереди, обмены, маршрутизация)?
	В чем разница между потребителем (Consumer) и публикацией сообщений (Publish)?

Конфигурация
	Как настроить MassTransit для работы с RabbitMQ или другой шиной сообщений?
	Что такое Endpoint в контексте MassTransit, и как его настроить?
	Как конфигурировать MassTransit через appsettings.json или код?

Сообщения и контракты
	Как создать контракт сообщения в MassTransit?
	Что такое топики, очереди и обмены в MassTransit?
	Как гарантировать совместимость контрактов сообщений при обновлениях?

Потребители (Consumers)
	Как создать потребитель в MassTransit?
	Чем отличаются IConsumer и IConsumerDefinition?
	Как обработать ошибку при потреблении сообщения?
	Как работают фильтры и middlewares в MassTransit?

Паттерны обработки
	Что такое Request/Response в MassTransit, и как это реализовать?
	Как работает Saga в MassTransit?
	В чем разница между Publish и Send? Когда использовать каждое?
	Что такое Routing Slip и как его применяют?

Производительность и надежность
	Какие механизмы повторной отправки (Retry) доступны в MassTransit?
	Что такое Idempotency в MassTransit, и как его реализовать?
	Как управлять PrefetchCount и Concurrency Limit?

Логирование и мониторинг
	Как настроить логирование в MassTransit?
	Какие метрики и инструменты мониторинга можно использовать с MassTransit?
	Как отследить выполнение сообщений или выявить "зависшие" задачи?

Практические вопросы
	Как интегрировать MassTransit с ASP.NET Core?
	Что делать, если сообщение не может быть обработано?
	Как обрабатывать dead-letter сообщения?
	Как использовать MassTransit с обработкой транзакций и базами данных?
	Какие хранилища поддерживаются для Sagas в MassTransit?

Продвинутые вопросы
	Как MassTransit управляет очередями задержки (Delayed Messages)?
	Как обеспечить масштабируемость MassTransit в продакшене?
	Как использовать фабрики клиентов (Client Factory) в MassTransit?
	В чем отличие между In-Memory Transport и использованием брокеров, таких как RabbitMQ или Azure Service Bus?
	Если у вас есть особые интересы или проекты с MassTransit, стоит готовиться с учетом их специфики.

